// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`App unit tests should match the snapshot 1`] = `
<Provider
  store={
    Object {
      "dispatch": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
      Symbol(observable): [Function],
    }
  }
>
  <App>
    <ThemeProvider
      theme={
        Object {
          "breakpoints": Object {
            "between": [Function],
            "down": [Function],
            "keys": Array [
              "xs",
              "sm",
              "md",
              "lg",
              "xl",
            ],
            "only": [Function],
            "up": [Function],
            "values": Object {
              "lg": 1280,
              "md": 960,
              "sm": 600,
              "xl": 1920,
              "xs": 0,
            },
            "width": [Function],
          },
          "direction": "ltr",
          "mixins": Object {
            "gutters": [Function],
            "toolbar": Object {
              "@media (min-width:0px) and (orientation: landscape)": Object {
                "minHeight": 48,
              },
              "@media (min-width:600px)": Object {
                "minHeight": 64,
              },
              "minHeight": 56,
            },
          },
          "overrides": Object {},
          "palette": Object {
            "action": Object {
              "activatedOpacity": 0.24,
              "active": "#fff",
              "disabled": "rgba(255, 255, 255, 0.3)",
              "disabledBackground": "rgba(255, 255, 255, 0.12)",
              "disabledOpacity": 0.38,
              "focus": "rgba(255, 255, 255, 0.12)",
              "focusOpacity": 0.12,
              "hover": "rgba(255, 255, 255, 0.08)",
              "hoverOpacity": 0.08,
              "selected": "rgba(255, 255, 255, 0.16)",
              "selectedOpacity": 0.16,
            },
            "augmentColor": [Function],
            "background": Object {
              "default": "#303030",
              "paper": "#424242",
            },
            "common": Object {
              "black": "#000",
              "white": "#fff",
            },
            "contrastThreshold": 3,
            "divider": "rgba(255, 255, 255, 0.12)",
            "error": Object {
              "contrastText": "#fff",
              "dark": "#d32f2f",
              "light": "#e57373",
              "main": "#f44336",
            },
            "getContrastText": [Function],
            "grey": Object {
              "100": "#f5f5f5",
              "200": "#eeeeee",
              "300": "#e0e0e0",
              "400": "#bdbdbd",
              "50": "#fafafa",
              "500": "#9e9e9e",
              "600": "#757575",
              "700": "#616161",
              "800": "#424242",
              "900": "#212121",
              "A100": "#d5d5d5",
              "A200": "#aaaaaa",
              "A400": "#303030",
              "A700": "#616161",
            },
            "info": Object {
              "contrastText": "#fff",
              "dark": "#1976d2",
              "light": "#64b5f6",
              "main": "#2196f3",
            },
            "primary": Object {
              "contrastText": "#fff",
              "dark": "#303f9f",
              "light": "#7986cb",
              "main": "#3f51b5",
            },
            "secondary": Object {
              "contrastText": "#fff",
              "dark": "#c51162",
              "light": "#ff4081",
              "main": "#f50057",
            },
            "success": Object {
              "contrastText": "rgba(0, 0, 0, 0.87)",
              "dark": "#388e3c",
              "light": "#81c784",
              "main": "#4caf50",
            },
            "text": Object {
              "disabled": "rgba(255, 255, 255, 0.5)",
              "hint": "rgba(255, 255, 255, 0.5)",
              "icon": "rgba(255, 255, 255, 0.5)",
              "primary": "#fff",
              "secondary": "rgba(255, 255, 255, 0.7)",
            },
            "tonalOffset": 0.2,
            "type": "dark",
            "warning": Object {
              "contrastText": "rgba(0, 0, 0, 0.87)",
              "dark": "#f57c00",
              "light": "#ffb74d",
              "main": "#ff9800",
            },
          },
          "props": Object {},
          "shadows": Array [
            "none",
            "0px 2px 1px -1px rgba(0,0,0,0.2),0px 1px 1px 0px rgba(0,0,0,0.14),0px 1px 3px 0px rgba(0,0,0,0.12)",
            "0px 3px 1px -2px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 1px 5px 0px rgba(0,0,0,0.12)",
            "0px 3px 3px -2px rgba(0,0,0,0.2),0px 3px 4px 0px rgba(0,0,0,0.14),0px 1px 8px 0px rgba(0,0,0,0.12)",
            "0px 2px 4px -1px rgba(0,0,0,0.2),0px 4px 5px 0px rgba(0,0,0,0.14),0px 1px 10px 0px rgba(0,0,0,0.12)",
            "0px 3px 5px -1px rgba(0,0,0,0.2),0px 5px 8px 0px rgba(0,0,0,0.14),0px 1px 14px 0px rgba(0,0,0,0.12)",
            "0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12)",
            "0px 4px 5px -2px rgba(0,0,0,0.2),0px 7px 10px 1px rgba(0,0,0,0.14),0px 2px 16px 1px rgba(0,0,0,0.12)",
            "0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12)",
            "0px 5px 6px -3px rgba(0,0,0,0.2),0px 9px 12px 1px rgba(0,0,0,0.14),0px 3px 16px 2px rgba(0,0,0,0.12)",
            "0px 6px 6px -3px rgba(0,0,0,0.2),0px 10px 14px 1px rgba(0,0,0,0.14),0px 4px 18px 3px rgba(0,0,0,0.12)",
            "0px 6px 7px -4px rgba(0,0,0,0.2),0px 11px 15px 1px rgba(0,0,0,0.14),0px 4px 20px 3px rgba(0,0,0,0.12)",
            "0px 7px 8px -4px rgba(0,0,0,0.2),0px 12px 17px 2px rgba(0,0,0,0.14),0px 5px 22px 4px rgba(0,0,0,0.12)",
            "0px 7px 8px -4px rgba(0,0,0,0.2),0px 13px 19px 2px rgba(0,0,0,0.14),0px 5px 24px 4px rgba(0,0,0,0.12)",
            "0px 7px 9px -4px rgba(0,0,0,0.2),0px 14px 21px 2px rgba(0,0,0,0.14),0px 5px 26px 4px rgba(0,0,0,0.12)",
            "0px 8px 9px -5px rgba(0,0,0,0.2),0px 15px 22px 2px rgba(0,0,0,0.14),0px 6px 28px 5px rgba(0,0,0,0.12)",
            "0px 8px 10px -5px rgba(0,0,0,0.2),0px 16px 24px 2px rgba(0,0,0,0.14),0px 6px 30px 5px rgba(0,0,0,0.12)",
            "0px 8px 11px -5px rgba(0,0,0,0.2),0px 17px 26px 2px rgba(0,0,0,0.14),0px 6px 32px 5px rgba(0,0,0,0.12)",
            "0px 9px 11px -5px rgba(0,0,0,0.2),0px 18px 28px 2px rgba(0,0,0,0.14),0px 7px 34px 6px rgba(0,0,0,0.12)",
            "0px 9px 12px -6px rgba(0,0,0,0.2),0px 19px 29px 2px rgba(0,0,0,0.14),0px 7px 36px 6px rgba(0,0,0,0.12)",
            "0px 10px 13px -6px rgba(0,0,0,0.2),0px 20px 31px 3px rgba(0,0,0,0.14),0px 8px 38px 7px rgba(0,0,0,0.12)",
            "0px 10px 13px -6px rgba(0,0,0,0.2),0px 21px 33px 3px rgba(0,0,0,0.14),0px 8px 40px 7px rgba(0,0,0,0.12)",
            "0px 10px 14px -6px rgba(0,0,0,0.2),0px 22px 35px 3px rgba(0,0,0,0.14),0px 8px 42px 7px rgba(0,0,0,0.12)",
            "0px 11px 14px -7px rgba(0,0,0,0.2),0px 23px 36px 3px rgba(0,0,0,0.14),0px 9px 44px 8px rgba(0,0,0,0.12)",
            "0px 11px 15px -7px rgba(0,0,0,0.2),0px 24px 38px 3px rgba(0,0,0,0.14),0px 9px 46px 8px rgba(0,0,0,0.12)",
          ],
          "shape": Object {
            "borderRadius": 4,
          },
          "spacing": [Function],
          "transitions": Object {
            "create": [Function],
            "duration": Object {
              "complex": 375,
              "enteringScreen": 225,
              "leavingScreen": 195,
              "short": 250,
              "shorter": 200,
              "shortest": 150,
              "standard": 300,
            },
            "easing": Object {
              "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
              "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
              "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
              "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
            },
            "getAutoHeightDuration": [Function],
          },
          "typography": Object {
            "body1": Object {
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "1rem",
              "fontWeight": 400,
              "letterSpacing": "0.00938em",
              "lineHeight": 1.5,
            },
            "body2": Object {
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "0.875rem",
              "fontWeight": 400,
              "letterSpacing": "0.01071em",
              "lineHeight": 1.43,
            },
            "button": Object {
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "0.875rem",
              "fontWeight": 500,
              "letterSpacing": "0.02857em",
              "lineHeight": 1.75,
              "textTransform": "uppercase",
            },
            "caption": Object {
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "0.75rem",
              "fontWeight": 400,
              "letterSpacing": "0.03333em",
              "lineHeight": 1.66,
            },
            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
            "fontSize": 14,
            "fontWeightBold": 700,
            "fontWeightLight": 300,
            "fontWeightMedium": 500,
            "fontWeightRegular": 400,
            "h1": Object {
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "6rem",
              "fontWeight": 300,
              "letterSpacing": "-0.01562em",
              "lineHeight": 1.167,
            },
            "h2": Object {
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "3.75rem",
              "fontWeight": 300,
              "letterSpacing": "-0.00833em",
              "lineHeight": 1.2,
            },
            "h3": Object {
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "3rem",
              "fontWeight": 400,
              "letterSpacing": "0em",
              "lineHeight": 1.167,
            },
            "h4": Object {
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "2.125rem",
              "fontWeight": 400,
              "letterSpacing": "0.00735em",
              "lineHeight": 1.235,
            },
            "h5": Object {
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "1.5rem",
              "fontWeight": 400,
              "letterSpacing": "0em",
              "lineHeight": 1.334,
            },
            "h6": Object {
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "1.25rem",
              "fontWeight": 500,
              "letterSpacing": "0.0075em",
              "lineHeight": 1.6,
            },
            "htmlFontSize": 16,
            "overline": Object {
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "0.75rem",
              "fontWeight": 400,
              "letterSpacing": "0.08333em",
              "lineHeight": 2.66,
              "textTransform": "uppercase",
            },
            "pxToRem": [Function],
            "round": [Function],
            "subtitle1": Object {
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "1rem",
              "fontWeight": 400,
              "letterSpacing": "0.00938em",
              "lineHeight": 1.75,
            },
            "subtitle2": Object {
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "0.875rem",
              "fontWeight": 500,
              "letterSpacing": "0.00714em",
              "lineHeight": 1.57,
            },
          },
          "zIndex": Object {
            "appBar": 1100,
            "drawer": 1200,
            "mobileStepper": 1000,
            "modal": 1300,
            "snackbar": 1400,
            "speedDial": 1050,
            "tooltip": 1500,
          },
          Symbol(mui.nested): false,
        }
      }
    >
      <WithStyles(CssBaseline)>
        <CssBaseline
          classes={Object {}}
        />
      </WithStyles(CssBaseline)>
      <div
        className="makeStyles-app-1"
      >
        <Component
          themeType="dark"
          toggleTheme={[Function]}
        >
          <div
            className="makeStyles-root-156"
          >
            <WithStyles(ForwardRef(AppBar))
              position="static"
            >
              <ForwardRef(AppBar)
                classes={
                  Object {
                    "colorDefault": "MuiAppBar-colorDefault",
                    "colorInherit": "MuiAppBar-colorInherit",
                    "colorPrimary": "MuiAppBar-colorPrimary",
                    "colorSecondary": "MuiAppBar-colorSecondary",
                    "colorTransparent": "MuiAppBar-colorTransparent",
                    "positionAbsolute": "MuiAppBar-positionAbsolute",
                    "positionFixed": "MuiAppBar-positionFixed",
                    "positionRelative": "MuiAppBar-positionRelative",
                    "positionStatic": "MuiAppBar-positionStatic",
                    "positionSticky": "MuiAppBar-positionSticky",
                    "root": "MuiAppBar-root",
                  }
                }
                position="static"
              >
                <WithStyles(ForwardRef(Paper))
                  className="MuiAppBar-root MuiAppBar-positionStatic MuiAppBar-colorPrimary"
                  component="header"
                  elevation={4}
                  square={true}
                >
                  <ForwardRef(Paper)
                    className="MuiAppBar-root MuiAppBar-positionStatic MuiAppBar-colorPrimary"
                    classes={
                      Object {
                        "elevation0": "MuiPaper-elevation0",
                        "elevation1": "MuiPaper-elevation1",
                        "elevation10": "MuiPaper-elevation10",
                        "elevation11": "MuiPaper-elevation11",
                        "elevation12": "MuiPaper-elevation12",
                        "elevation13": "MuiPaper-elevation13",
                        "elevation14": "MuiPaper-elevation14",
                        "elevation15": "MuiPaper-elevation15",
                        "elevation16": "MuiPaper-elevation16",
                        "elevation17": "MuiPaper-elevation17",
                        "elevation18": "MuiPaper-elevation18",
                        "elevation19": "MuiPaper-elevation19",
                        "elevation2": "MuiPaper-elevation2",
                        "elevation20": "MuiPaper-elevation20",
                        "elevation21": "MuiPaper-elevation21",
                        "elevation22": "MuiPaper-elevation22",
                        "elevation23": "MuiPaper-elevation23",
                        "elevation24": "MuiPaper-elevation24",
                        "elevation3": "MuiPaper-elevation3",
                        "elevation4": "MuiPaper-elevation4",
                        "elevation5": "MuiPaper-elevation5",
                        "elevation6": "MuiPaper-elevation6",
                        "elevation7": "MuiPaper-elevation7",
                        "elevation8": "MuiPaper-elevation8",
                        "elevation9": "MuiPaper-elevation9",
                        "outlined": "MuiPaper-outlined",
                        "root": "MuiPaper-root",
                        "rounded": "MuiPaper-rounded",
                      }
                    }
                    component="header"
                    elevation={4}
                    square={true}
                  >
                    <header
                      className="MuiPaper-root MuiAppBar-root MuiAppBar-positionStatic MuiAppBar-colorPrimary MuiPaper-elevation4"
                    >
                      <WithStyles(ForwardRef(Toolbar))>
                        <ForwardRef(Toolbar)
                          classes={
                            Object {
                              "dense": "MuiToolbar-dense",
                              "gutters": "MuiToolbar-gutters",
                              "regular": "MuiToolbar-regular",
                              "root": "MuiToolbar-root",
                            }
                          }
                        >
                          <div
                            className="MuiToolbar-root MuiToolbar-regular MuiToolbar-gutters"
                          >
                            <WithStyles(ForwardRef(IconButton))
                              aria-label="menu"
                              className="makeStyles-menuButton-157"
                              color="inherit"
                              edge="start"
                            >
                              <ForwardRef(IconButton)
                                aria-label="menu"
                                className="makeStyles-menuButton-157"
                                classes={
                                  Object {
                                    "colorInherit": "MuiIconButton-colorInherit",
                                    "colorPrimary": "MuiIconButton-colorPrimary",
                                    "colorSecondary": "MuiIconButton-colorSecondary",
                                    "disabled": "Mui-disabled",
                                    "edgeEnd": "MuiIconButton-edgeEnd",
                                    "edgeStart": "MuiIconButton-edgeStart",
                                    "label": "MuiIconButton-label",
                                    "root": "MuiIconButton-root",
                                    "sizeSmall": "MuiIconButton-sizeSmall",
                                  }
                                }
                                color="inherit"
                                edge="start"
                              >
                                <WithStyles(ForwardRef(ButtonBase))
                                  aria-label="menu"
                                  centerRipple={true}
                                  className="MuiIconButton-root makeStyles-menuButton-157 MuiIconButton-colorInherit MuiIconButton-edgeStart"
                                  disabled={false}
                                  focusRipple={true}
                                >
                                  <ForwardRef(ButtonBase)
                                    aria-label="menu"
                                    centerRipple={true}
                                    className="MuiIconButton-root makeStyles-menuButton-157 MuiIconButton-colorInherit MuiIconButton-edgeStart"
                                    classes={
                                      Object {
                                        "disabled": "Mui-disabled",
                                        "focusVisible": "Mui-focusVisible",
                                        "root": "MuiButtonBase-root",
                                      }
                                    }
                                    disabled={false}
                                    focusRipple={true}
                                  >
                                    <button
                                      aria-label="menu"
                                      className="MuiButtonBase-root MuiIconButton-root makeStyles-menuButton-157 MuiIconButton-colorInherit MuiIconButton-edgeStart"
                                      disabled={false}
                                      onBlur={[Function]}
                                      onDragLeave={[Function]}
                                      onFocus={[Function]}
                                      onKeyDown={[Function]}
                                      onKeyUp={[Function]}
                                      onMouseDown={[Function]}
                                      onMouseLeave={[Function]}
                                      onMouseUp={[Function]}
                                      onTouchEnd={[Function]}
                                      onTouchMove={[Function]}
                                      onTouchStart={[Function]}
                                      tabIndex={0}
                                      type="button"
                                    >
                                      <span
                                        className="MuiIconButton-label"
                                      >
                                        <MenuIcon>
                                          <div
                                            className="menu-icon--wrapper makeStyles-icon-155"
                                          >
                                            <svg
                                              fill="none"
                                              height="24"
                                              viewBox="0 0 24 24"
                                              width="24"
                                              xmlns="http://www.w3.org/2000/svg"
                                            >
                                              <path
                                                d="M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z"
                                                fill="#FFFFFF"
                                              />
                                            </svg>
                                          </div>
                                        </MenuIcon>
                                      </span>
                                      <NoSsr>
                                        <WithStyles(undefined)
                                          center={true}
                                        >
                                          <ForwardRef(TouchRipple)
                                            center={true}
                                            classes={
                                              Object {
                                                "child": "MuiTouchRipple-child",
                                                "childLeaving": "MuiTouchRipple-childLeaving",
                                                "childPulsate": "MuiTouchRipple-childPulsate",
                                                "ripple": "MuiTouchRipple-ripple",
                                                "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                                "rippleVisible": "MuiTouchRipple-rippleVisible",
                                                "root": "MuiTouchRipple-root",
                                              }
                                            }
                                          >
                                            <span
                                              className="MuiTouchRipple-root"
                                            >
                                              <TransitionGroup
                                                childFactory={[Function]}
                                                component={null}
                                                exit={true}
                                              />
                                            </span>
                                          </ForwardRef(TouchRipple)>
                                        </WithStyles(undefined)>
                                      </NoSsr>
                                    </button>
                                  </ForwardRef(ButtonBase)>
                                </WithStyles(ForwardRef(ButtonBase))>
                              </ForwardRef(IconButton)>
                            </WithStyles(ForwardRef(IconButton))>
                            <WithStyles(ForwardRef(Typography))
                              className="makeStyles-title-158"
                              variant="h6"
                            >
                              <ForwardRef(Typography)
                                className="makeStyles-title-158"
                                classes={
                                  Object {
                                    "alignCenter": "MuiTypography-alignCenter",
                                    "alignJustify": "MuiTypography-alignJustify",
                                    "alignLeft": "MuiTypography-alignLeft",
                                    "alignRight": "MuiTypography-alignRight",
                                    "body1": "MuiTypography-body1",
                                    "body2": "MuiTypography-body2",
                                    "button": "MuiTypography-button",
                                    "caption": "MuiTypography-caption",
                                    "colorError": "MuiTypography-colorError",
                                    "colorInherit": "MuiTypography-colorInherit",
                                    "colorPrimary": "MuiTypography-colorPrimary",
                                    "colorSecondary": "MuiTypography-colorSecondary",
                                    "colorTextPrimary": "MuiTypography-colorTextPrimary",
                                    "colorTextSecondary": "MuiTypography-colorTextSecondary",
                                    "displayBlock": "MuiTypography-displayBlock",
                                    "displayInline": "MuiTypography-displayInline",
                                    "gutterBottom": "MuiTypography-gutterBottom",
                                    "h1": "MuiTypography-h1",
                                    "h2": "MuiTypography-h2",
                                    "h3": "MuiTypography-h3",
                                    "h4": "MuiTypography-h4",
                                    "h5": "MuiTypography-h5",
                                    "h6": "MuiTypography-h6",
                                    "noWrap": "MuiTypography-noWrap",
                                    "overline": "MuiTypography-overline",
                                    "paragraph": "MuiTypography-paragraph",
                                    "root": "MuiTypography-root",
                                    "srOnly": "MuiTypography-srOnly",
                                    "subtitle1": "MuiTypography-subtitle1",
                                    "subtitle2": "MuiTypography-subtitle2",
                                  }
                                }
                                variant="h6"
                              >
                                <h6
                                  className="MuiTypography-root makeStyles-title-158 MuiTypography-h6"
                                >
                                  DumbAFCbts
                                </h6>
                              </ForwardRef(Typography)>
                            </WithStyles(ForwardRef(Typography))>
                            <WithStyles(ForwardRef(Button))
                              className="user--login-button"
                              color="inherit"
                              onClick={[Function]}
                            >
                              <ForwardRef(Button)
                                className="user--login-button"
                                classes={
                                  Object {
                                    "colorInherit": "MuiButton-colorInherit",
                                    "contained": "MuiButton-contained",
                                    "containedPrimary": "MuiButton-containedPrimary",
                                    "containedSecondary": "MuiButton-containedSecondary",
                                    "containedSizeLarge": "MuiButton-containedSizeLarge",
                                    "containedSizeSmall": "MuiButton-containedSizeSmall",
                                    "disableElevation": "MuiButton-disableElevation",
                                    "disabled": "Mui-disabled",
                                    "endIcon": "MuiButton-endIcon",
                                    "focusVisible": "Mui-focusVisible",
                                    "fullWidth": "MuiButton-fullWidth",
                                    "iconSizeLarge": "MuiButton-iconSizeLarge",
                                    "iconSizeMedium": "MuiButton-iconSizeMedium",
                                    "iconSizeSmall": "MuiButton-iconSizeSmall",
                                    "label": "MuiButton-label",
                                    "outlined": "MuiButton-outlined",
                                    "outlinedPrimary": "MuiButton-outlinedPrimary",
                                    "outlinedSecondary": "MuiButton-outlinedSecondary",
                                    "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                                    "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                                    "root": "MuiButton-root",
                                    "sizeLarge": "MuiButton-sizeLarge",
                                    "sizeSmall": "MuiButton-sizeSmall",
                                    "startIcon": "MuiButton-startIcon",
                                    "text": "MuiButton-text",
                                    "textPrimary": "MuiButton-textPrimary",
                                    "textSecondary": "MuiButton-textSecondary",
                                    "textSizeLarge": "MuiButton-textSizeLarge",
                                    "textSizeSmall": "MuiButton-textSizeSmall",
                                  }
                                }
                                color="inherit"
                                onClick={[Function]}
                              >
                                <WithStyles(ForwardRef(ButtonBase))
                                  className="MuiButton-root MuiButton-text user--login-button MuiButton-colorInherit"
                                  component="button"
                                  disabled={false}
                                  focusRipple={true}
                                  focusVisibleClassName="Mui-focusVisible"
                                  onClick={[Function]}
                                  type="button"
                                >
                                  <ForwardRef(ButtonBase)
                                    className="MuiButton-root MuiButton-text user--login-button MuiButton-colorInherit"
                                    classes={
                                      Object {
                                        "disabled": "Mui-disabled",
                                        "focusVisible": "Mui-focusVisible",
                                        "root": "MuiButtonBase-root",
                                      }
                                    }
                                    component="button"
                                    disabled={false}
                                    focusRipple={true}
                                    focusVisibleClassName="Mui-focusVisible"
                                    onClick={[Function]}
                                    type="button"
                                  >
                                    <button
                                      className="MuiButtonBase-root MuiButton-root MuiButton-text user--login-button MuiButton-colorInherit"
                                      disabled={false}
                                      onBlur={[Function]}
                                      onClick={[Function]}
                                      onDragLeave={[Function]}
                                      onFocus={[Function]}
                                      onKeyDown={[Function]}
                                      onKeyUp={[Function]}
                                      onMouseDown={[Function]}
                                      onMouseLeave={[Function]}
                                      onMouseUp={[Function]}
                                      onTouchEnd={[Function]}
                                      onTouchMove={[Function]}
                                      onTouchStart={[Function]}
                                      tabIndex={0}
                                      type="button"
                                    >
                                      <span
                                        className="MuiButton-label"
                                      >
                                        LOGIN
                                      </span>
                                      <NoSsr>
                                        <WithStyles(undefined)
                                          center={false}
                                        >
                                          <ForwardRef(TouchRipple)
                                            center={false}
                                            classes={
                                              Object {
                                                "child": "MuiTouchRipple-child",
                                                "childLeaving": "MuiTouchRipple-childLeaving",
                                                "childPulsate": "MuiTouchRipple-childPulsate",
                                                "ripple": "MuiTouchRipple-ripple",
                                                "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                                "rippleVisible": "MuiTouchRipple-rippleVisible",
                                                "root": "MuiTouchRipple-root",
                                              }
                                            }
                                          >
                                            <span
                                              className="MuiTouchRipple-root"
                                            >
                                              <TransitionGroup
                                                childFactory={[Function]}
                                                component={null}
                                                exit={true}
                                              />
                                            </span>
                                          </ForwardRef(TouchRipple)>
                                        </WithStyles(undefined)>
                                      </NoSsr>
                                    </button>
                                  </ForwardRef(ButtonBase)>
                                </WithStyles(ForwardRef(ButtonBase))>
                              </ForwardRef(Button)>
                            </WithStyles(ForwardRef(Button))>
                            <div
                              className="theme-toggle--button"
                              onClick={[Function]}
                            >
                              <WithStyles(ForwardRef(IconButton))
                                color="inherit"
                              >
                                <ForwardRef(IconButton)
                                  classes={
                                    Object {
                                      "colorInherit": "MuiIconButton-colorInherit",
                                      "colorPrimary": "MuiIconButton-colorPrimary",
                                      "colorSecondary": "MuiIconButton-colorSecondary",
                                      "disabled": "Mui-disabled",
                                      "edgeEnd": "MuiIconButton-edgeEnd",
                                      "edgeStart": "MuiIconButton-edgeStart",
                                      "label": "MuiIconButton-label",
                                      "root": "MuiIconButton-root",
                                      "sizeSmall": "MuiIconButton-sizeSmall",
                                    }
                                  }
                                  color="inherit"
                                >
                                  <WithStyles(ForwardRef(ButtonBase))
                                    centerRipple={true}
                                    className="MuiIconButton-root MuiIconButton-colorInherit"
                                    disabled={false}
                                    focusRipple={true}
                                  >
                                    <ForwardRef(ButtonBase)
                                      centerRipple={true}
                                      className="MuiIconButton-root MuiIconButton-colorInherit"
                                      classes={
                                        Object {
                                          "disabled": "Mui-disabled",
                                          "focusVisible": "Mui-focusVisible",
                                          "root": "MuiButtonBase-root",
                                        }
                                      }
                                      disabled={false}
                                      focusRipple={true}
                                    >
                                      <button
                                        className="MuiButtonBase-root MuiIconButton-root MuiIconButton-colorInherit"
                                        disabled={false}
                                        onBlur={[Function]}
                                        onDragLeave={[Function]}
                                        onFocus={[Function]}
                                        onKeyDown={[Function]}
                                        onKeyUp={[Function]}
                                        onMouseDown={[Function]}
                                        onMouseLeave={[Function]}
                                        onMouseUp={[Function]}
                                        onTouchEnd={[Function]}
                                        onTouchMove={[Function]}
                                        onTouchStart={[Function]}
                                        tabIndex={0}
                                        type="button"
                                      >
                                        <span
                                          className="MuiIconButton-label"
                                        >
                                          <LightbulbIcon
                                            variant="dark"
                                          >
                                            <div
                                              className="lightbulb-icon--wrapper toggle-light makeStyles-icon-155"
                                            >
                                              <svg
                                                fill="none"
                                                height="24"
                                                viewBox="0 0 24 24"
                                                width="24"
                                                xmlns="http://www.w3.org/2000/svg"
                                              >
                                                <path
                                                  d="M3.55 18.54l1.41 1.41 1.79-1.8-1.41-1.41-1.79 1.8zM11 22.45h2V19.5h-2v2.95zM4 10.5H1v2h3v-2zm11-4.19V1.5H9v4.81C7.21 7.35 6 9.28 6 11.5c0 3.31 2.69 6 6 6s6-2.69 6-6c0-2.22-1.21-4.15-3-5.19zm5 4.19v2h3v-2h-3zm-2.76 7.66l1.79 1.8 1.41-1.41-1.8-1.79-1.4 1.4z"
                                                  fill="#FFFFFF"
                                                />
                                              </svg>
                                            </div>
                                          </LightbulbIcon>
                                        </span>
                                        <NoSsr>
                                          <WithStyles(undefined)
                                            center={true}
                                          >
                                            <ForwardRef(TouchRipple)
                                              center={true}
                                              classes={
                                                Object {
                                                  "child": "MuiTouchRipple-child",
                                                  "childLeaving": "MuiTouchRipple-childLeaving",
                                                  "childPulsate": "MuiTouchRipple-childPulsate",
                                                  "ripple": "MuiTouchRipple-ripple",
                                                  "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                                  "rippleVisible": "MuiTouchRipple-rippleVisible",
                                                  "root": "MuiTouchRipple-root",
                                                }
                                              }
                                            >
                                              <span
                                                className="MuiTouchRipple-root"
                                              >
                                                <TransitionGroup
                                                  childFactory={[Function]}
                                                  component={null}
                                                  exit={true}
                                                />
                                              </span>
                                            </ForwardRef(TouchRipple)>
                                          </WithStyles(undefined)>
                                        </NoSsr>
                                      </button>
                                    </ForwardRef(ButtonBase)>
                                  </WithStyles(ForwardRef(ButtonBase))>
                                </ForwardRef(IconButton)>
                              </WithStyles(ForwardRef(IconButton))>
                            </div>
                          </div>
                        </ForwardRef(Toolbar)>
                      </WithStyles(ForwardRef(Toolbar))>
                    </header>
                  </ForwardRef(Paper)>
                </WithStyles(ForwardRef(Paper))>
              </ForwardRef(AppBar)>
            </WithStyles(ForwardRef(AppBar))>
          </div>
        </Component>
        <Dashboard>
          <div
            className="makeStyles-dashboardContainer-152"
          >
            <div
              className="makeStyles-dashboard-153"
            >
              Cbts fetched: 
              0
              <WithStyles(ForwardRef(Button))
                className="refetch"
                color="primary"
                onClick={[Function]}
              >
                <ForwardRef(Button)
                  className="refetch"
                  classes={
                    Object {
                      "colorInherit": "MuiButton-colorInherit",
                      "contained": "MuiButton-contained",
                      "containedPrimary": "MuiButton-containedPrimary",
                      "containedSecondary": "MuiButton-containedSecondary",
                      "containedSizeLarge": "MuiButton-containedSizeLarge",
                      "containedSizeSmall": "MuiButton-containedSizeSmall",
                      "disableElevation": "MuiButton-disableElevation",
                      "disabled": "Mui-disabled",
                      "endIcon": "MuiButton-endIcon",
                      "focusVisible": "Mui-focusVisible",
                      "fullWidth": "MuiButton-fullWidth",
                      "iconSizeLarge": "MuiButton-iconSizeLarge",
                      "iconSizeMedium": "MuiButton-iconSizeMedium",
                      "iconSizeSmall": "MuiButton-iconSizeSmall",
                      "label": "MuiButton-label",
                      "outlined": "MuiButton-outlined",
                      "outlinedPrimary": "MuiButton-outlinedPrimary",
                      "outlinedSecondary": "MuiButton-outlinedSecondary",
                      "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                      "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                      "root": "MuiButton-root",
                      "sizeLarge": "MuiButton-sizeLarge",
                      "sizeSmall": "MuiButton-sizeSmall",
                      "startIcon": "MuiButton-startIcon",
                      "text": "MuiButton-text",
                      "textPrimary": "MuiButton-textPrimary",
                      "textSecondary": "MuiButton-textSecondary",
                      "textSizeLarge": "MuiButton-textSizeLarge",
                      "textSizeSmall": "MuiButton-textSizeSmall",
                    }
                  }
                  color="primary"
                  onClick={[Function]}
                >
                  <WithStyles(ForwardRef(ButtonBase))
                    className="MuiButton-root MuiButton-text refetch MuiButton-textPrimary"
                    component="button"
                    disabled={false}
                    focusRipple={true}
                    focusVisibleClassName="Mui-focusVisible"
                    onClick={[Function]}
                    type="button"
                  >
                    <ForwardRef(ButtonBase)
                      className="MuiButton-root MuiButton-text refetch MuiButton-textPrimary"
                      classes={
                        Object {
                          "disabled": "Mui-disabled",
                          "focusVisible": "Mui-focusVisible",
                          "root": "MuiButtonBase-root",
                        }
                      }
                      component="button"
                      disabled={false}
                      focusRipple={true}
                      focusVisibleClassName="Mui-focusVisible"
                      onClick={[Function]}
                      type="button"
                    >
                      <button
                        className="MuiButtonBase-root MuiButton-root MuiButton-text refetch MuiButton-textPrimary"
                        disabled={false}
                        onBlur={[Function]}
                        onClick={[Function]}
                        onDragLeave={[Function]}
                        onFocus={[Function]}
                        onKeyDown={[Function]}
                        onKeyUp={[Function]}
                        onMouseDown={[Function]}
                        onMouseLeave={[Function]}
                        onMouseUp={[Function]}
                        onTouchEnd={[Function]}
                        onTouchMove={[Function]}
                        onTouchStart={[Function]}
                        tabIndex={0}
                        type="button"
                      >
                        <span
                          className="MuiButton-label"
                        >
                          Re-Fetch
                        </span>
                        <NoSsr>
                          <WithStyles(undefined)
                            center={false}
                          >
                            <ForwardRef(TouchRipple)
                              center={false}
                              classes={
                                Object {
                                  "child": "MuiTouchRipple-child",
                                  "childLeaving": "MuiTouchRipple-childLeaving",
                                  "childPulsate": "MuiTouchRipple-childPulsate",
                                  "ripple": "MuiTouchRipple-ripple",
                                  "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                  "rippleVisible": "MuiTouchRipple-rippleVisible",
                                  "root": "MuiTouchRipple-root",
                                }
                              }
                            >
                              <span
                                className="MuiTouchRipple-root"
                              >
                                <TransitionGroup
                                  childFactory={[Function]}
                                  component={null}
                                  exit={true}
                                />
                              </span>
                            </ForwardRef(TouchRipple)>
                          </WithStyles(undefined)>
                        </NoSsr>
                      </button>
                    </ForwardRef(ButtonBase)>
                  </WithStyles(ForwardRef(ButtonBase))>
                </ForwardRef(Button)>
              </WithStyles(ForwardRef(Button))>
            </div>
          </div>
        </Dashboard>
        <Footer>
          <div
            className="makeStyles-footer-154"
          >
            <WithStyles(ForwardRef(Typography))>
              <ForwardRef(Typography)
                classes={
                  Object {
                    "alignCenter": "MuiTypography-alignCenter",
                    "alignJustify": "MuiTypography-alignJustify",
                    "alignLeft": "MuiTypography-alignLeft",
                    "alignRight": "MuiTypography-alignRight",
                    "body1": "MuiTypography-body1",
                    "body2": "MuiTypography-body2",
                    "button": "MuiTypography-button",
                    "caption": "MuiTypography-caption",
                    "colorError": "MuiTypography-colorError",
                    "colorInherit": "MuiTypography-colorInherit",
                    "colorPrimary": "MuiTypography-colorPrimary",
                    "colorSecondary": "MuiTypography-colorSecondary",
                    "colorTextPrimary": "MuiTypography-colorTextPrimary",
                    "colorTextSecondary": "MuiTypography-colorTextSecondary",
                    "displayBlock": "MuiTypography-displayBlock",
                    "displayInline": "MuiTypography-displayInline",
                    "gutterBottom": "MuiTypography-gutterBottom",
                    "h1": "MuiTypography-h1",
                    "h2": "MuiTypography-h2",
                    "h3": "MuiTypography-h3",
                    "h4": "MuiTypography-h4",
                    "h5": "MuiTypography-h5",
                    "h6": "MuiTypography-h6",
                    "noWrap": "MuiTypography-noWrap",
                    "overline": "MuiTypography-overline",
                    "paragraph": "MuiTypography-paragraph",
                    "root": "MuiTypography-root",
                    "srOnly": "MuiTypography-srOnly",
                    "subtitle1": "MuiTypography-subtitle1",
                    "subtitle2": "MuiTypography-subtitle2",
                  }
                }
              >
                <p
                  className="MuiTypography-root MuiTypography-body1"
                >
                  DumbAFCBTs by Marc. Support the site by clicking
                  <WithStyles(ForwardRef(Link))
                    href="https://dumbafcbts.app/support"
                    rel="noreferrer"
                    target="_blank"
                  >
                    <ForwardRef(Link)
                      classes={
                        Object {
                          "button": "MuiLink-button",
                          "focusVisible": "Mui-focusVisible",
                          "root": "MuiLink-root",
                          "underlineAlways": "MuiLink-underlineAlways",
                          "underlineHover": "MuiLink-underlineHover",
                          "underlineNone": "MuiLink-underlineNone",
                        }
                      }
                      href="https://dumbafcbts.app/support"
                      rel="noreferrer"
                      target="_blank"
                    >
                      <WithStyles(ForwardRef(Typography))
                        className="MuiLink-root MuiLink-underlineHover"
                        color="primary"
                        component="a"
                        href="https://dumbafcbts.app/support"
                        onBlur={[Function]}
                        onFocus={[Function]}
                        rel="noreferrer"
                        target="_blank"
                        variant="inherit"
                      >
                        <ForwardRef(Typography)
                          className="MuiLink-root MuiLink-underlineHover"
                          classes={
                            Object {
                              "alignCenter": "MuiTypography-alignCenter",
                              "alignJustify": "MuiTypography-alignJustify",
                              "alignLeft": "MuiTypography-alignLeft",
                              "alignRight": "MuiTypography-alignRight",
                              "body1": "MuiTypography-body1",
                              "body2": "MuiTypography-body2",
                              "button": "MuiTypography-button",
                              "caption": "MuiTypography-caption",
                              "colorError": "MuiTypography-colorError",
                              "colorInherit": "MuiTypography-colorInherit",
                              "colorPrimary": "MuiTypography-colorPrimary",
                              "colorSecondary": "MuiTypography-colorSecondary",
                              "colorTextPrimary": "MuiTypography-colorTextPrimary",
                              "colorTextSecondary": "MuiTypography-colorTextSecondary",
                              "displayBlock": "MuiTypography-displayBlock",
                              "displayInline": "MuiTypography-displayInline",
                              "gutterBottom": "MuiTypography-gutterBottom",
                              "h1": "MuiTypography-h1",
                              "h2": "MuiTypography-h2",
                              "h3": "MuiTypography-h3",
                              "h4": "MuiTypography-h4",
                              "h5": "MuiTypography-h5",
                              "h6": "MuiTypography-h6",
                              "noWrap": "MuiTypography-noWrap",
                              "overline": "MuiTypography-overline",
                              "paragraph": "MuiTypography-paragraph",
                              "root": "MuiTypography-root",
                              "srOnly": "MuiTypography-srOnly",
                              "subtitle1": "MuiTypography-subtitle1",
                              "subtitle2": "MuiTypography-subtitle2",
                            }
                          }
                          color="primary"
                          component="a"
                          href="https://dumbafcbts.app/support"
                          onBlur={[Function]}
                          onFocus={[Function]}
                          rel="noreferrer"
                          target="_blank"
                          variant="inherit"
                        >
                          <a
                            className="MuiTypography-root MuiLink-root MuiLink-underlineHover MuiTypography-colorPrimary"
                            href="https://dumbafcbts.app/support"
                            onBlur={[Function]}
                            onFocus={[Function]}
                            rel="noreferrer"
                            target="_blank"
                          >
                             here 
                          </a>
                        </ForwardRef(Typography)>
                      </WithStyles(ForwardRef(Typography))>
                    </ForwardRef(Link)>
                  </WithStyles(ForwardRef(Link))>
                  . Visit
                  <WithStyles(ForwardRef(Link))
                    href="https://www.reddit.com/r/dumbafcbts"
                    rel="noreferrer"
                    target="_blank"
                  >
                    <ForwardRef(Link)
                      classes={
                        Object {
                          "button": "MuiLink-button",
                          "focusVisible": "Mui-focusVisible",
                          "root": "MuiLink-root",
                          "underlineAlways": "MuiLink-underlineAlways",
                          "underlineHover": "MuiLink-underlineHover",
                          "underlineNone": "MuiLink-underlineNone",
                        }
                      }
                      href="https://www.reddit.com/r/dumbafcbts"
                      rel="noreferrer"
                      target="_blank"
                    >
                      <WithStyles(ForwardRef(Typography))
                        className="MuiLink-root MuiLink-underlineHover"
                        color="primary"
                        component="a"
                        href="https://www.reddit.com/r/dumbafcbts"
                        onBlur={[Function]}
                        onFocus={[Function]}
                        rel="noreferrer"
                        target="_blank"
                        variant="inherit"
                      >
                        <ForwardRef(Typography)
                          className="MuiLink-root MuiLink-underlineHover"
                          classes={
                            Object {
                              "alignCenter": "MuiTypography-alignCenter",
                              "alignJustify": "MuiTypography-alignJustify",
                              "alignLeft": "MuiTypography-alignLeft",
                              "alignRight": "MuiTypography-alignRight",
                              "body1": "MuiTypography-body1",
                              "body2": "MuiTypography-body2",
                              "button": "MuiTypography-button",
                              "caption": "MuiTypography-caption",
                              "colorError": "MuiTypography-colorError",
                              "colorInherit": "MuiTypography-colorInherit",
                              "colorPrimary": "MuiTypography-colorPrimary",
                              "colorSecondary": "MuiTypography-colorSecondary",
                              "colorTextPrimary": "MuiTypography-colorTextPrimary",
                              "colorTextSecondary": "MuiTypography-colorTextSecondary",
                              "displayBlock": "MuiTypography-displayBlock",
                              "displayInline": "MuiTypography-displayInline",
                              "gutterBottom": "MuiTypography-gutterBottom",
                              "h1": "MuiTypography-h1",
                              "h2": "MuiTypography-h2",
                              "h3": "MuiTypography-h3",
                              "h4": "MuiTypography-h4",
                              "h5": "MuiTypography-h5",
                              "h6": "MuiTypography-h6",
                              "noWrap": "MuiTypography-noWrap",
                              "overline": "MuiTypography-overline",
                              "paragraph": "MuiTypography-paragraph",
                              "root": "MuiTypography-root",
                              "srOnly": "MuiTypography-srOnly",
                              "subtitle1": "MuiTypography-subtitle1",
                              "subtitle2": "MuiTypography-subtitle2",
                            }
                          }
                          color="primary"
                          component="a"
                          href="https://www.reddit.com/r/dumbafcbts"
                          onBlur={[Function]}
                          onFocus={[Function]}
                          rel="noreferrer"
                          target="_blank"
                          variant="inherit"
                        >
                          <a
                            className="MuiTypography-root MuiLink-root MuiLink-underlineHover MuiTypography-colorPrimary"
                            href="https://www.reddit.com/r/dumbafcbts"
                            onBlur={[Function]}
                            onFocus={[Function]}
                            rel="noreferrer"
                            target="_blank"
                          >
                             /r/DumbAFCBTs 
                          </a>
                        </ForwardRef(Typography)>
                      </WithStyles(ForwardRef(Typography))>
                    </ForwardRef(Link)>
                  </WithStyles(ForwardRef(Link))>
                  on Reddit.
                </p>
              </ForwardRef(Typography)>
            </WithStyles(ForwardRef(Typography))>
          </div>
        </Footer>
        <LoginModal
          display={true}
        >
          <ForwardRef(Modal)
            onClose={[Function]}
            open={true}
            style={
              Object {
                "left": "50%",
                "top": "50%",
              }
            }
          >
            <ForwardRef(Portal)
              disablePortal={false}
            >
              <Portal
                containerInfo={
                  <body
                    style="padding-right: 0px; overflow: hidden;"
                  >
                    <div
                      role="presentation"
                      style="position: fixed; z-index: 1300; right: 0px; bottom: 0px; top: 50%; left: 50%;"
                    >
                      <div
                        aria-hidden="true"
                        style="z-index: -1; position: fixed; right: 0px; bottom: 0px; top: 0px; left: 0px; background-color: rgba(0, 0, 0, 0.5);"
                      />
                      <div
                        data-test="sentinelStart"
                        tabindex="0"
                      />
                      <div
                        class="makeStyles-modalBody-160 makeStyles-paper-159 login--modal"
                        tabindex="-1"
                      >
                        <p
                          class="MuiTypography-root MuiTypography-body1"
                        >
                          LOGIN
                        </p>
                        <div
                          class="modal-text"
                        >
                          <div
                            class="MuiFormControl-root MuiTextField-root"
                          >
                            <label
                              class="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-shrink MuiInputLabel-outlined Mui-focused Mui-focused"
                              data-shrink="true"
                              for="username-email--input"
                              id="username-email--input-label"
                            >
                              Username or Email
                            </label>
                            <div
                              class="MuiInputBase-root MuiOutlinedInput-root Mui-focused Mui-focused MuiInputBase-formControl"
                            >
                              <input
                                aria-invalid="false"
                                class="MuiInputBase-input MuiOutlinedInput-input"
                                id="username-email--input"
                                type="text"
                                value=""
                              />
                              <fieldset
                                aria-hidden="true"
                                class="PrivateNotchedOutline-root-349 MuiOutlinedInput-notchedOutline"
                              >
                                <legend
                                  class="PrivateNotchedOutline-legendLabelled-351 PrivateNotchedOutline-legendNotched-352"
                                >
                                  <span>
                                    Username or Email
                                  </span>
                                </legend>
                              </fieldset>
                            </div>
                          </div>
                        </div>
                        <div
                          class="modal-text"
                        >
                          <div
                            class="MuiFormControl-root MuiTextField-root"
                          >
                            <label
                              class="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-outlined"
                              data-shrink="false"
                              for="password--input"
                              id="password--input-label"
                            >
                              Password
                            </label>
                            <div
                              class="MuiInputBase-root MuiOutlinedInput-root MuiInputBase-formControl"
                            >
                              <input
                                aria-invalid="false"
                                class="MuiInputBase-input MuiOutlinedInput-input"
                                id="password--input"
                                type="password"
                                value=""
                              />
                              <fieldset
                                aria-hidden="true"
                                class="PrivateNotchedOutline-root-349 MuiOutlinedInput-notchedOutline"
                              >
                                <legend
                                  class="PrivateNotchedOutline-legendLabelled-351"
                                >
                                  <span>
                                    Password
                                  </span>
                                </legend>
                              </fieldset>
                            </div>
                          </div>
                        </div>
                        <button
                          class="MuiButtonBase-root MuiButton-root MuiButton-contained MuiButton-containedPrimary"
                          tabindex="0"
                          type="button"
                        >
                          <span
                            class="MuiButton-label"
                          >
                            SUBMIT
                          </span>
                          <span
                            class="MuiTouchRipple-root"
                          />
                        </button>
                      </div>
                      <div
                        data-test="sentinelEnd"
                        tabindex="0"
                      />
                    </div>
                  </body>
                }
              >
                <div
                  onKeyDown={[Function]}
                  role="presentation"
                  style={
                    Object {
                      "bottom": 0,
                      "left": "50%",
                      "position": "fixed",
                      "right": 0,
                      "top": "50%",
                      "zIndex": 1300,
                    }
                  }
                >
                  <ForwardRef(SimpleBackdrop)
                    onClick={[Function]}
                    open={true}
                  >
                    <div
                      aria-hidden={true}
                      onClick={[Function]}
                      style={
                        Object {
                          "WebkitTapHighlightColor": "transparent",
                          "backgroundColor": "rgba(0, 0, 0, 0.5)",
                          "bottom": 0,
                          "left": 0,
                          "position": "fixed",
                          "right": 0,
                          "top": 0,
                          "zIndex": -1,
                        }
                      }
                    />
                  </ForwardRef(SimpleBackdrop)>
                  <TrapFocus
                    disableAutoFocus={false}
                    disableEnforceFocus={false}
                    disableRestoreFocus={false}
                    getDoc={[Function]}
                    isEnabled={[Function]}
                    open={true}
                  >
                    <div
                      data-test="sentinelStart"
                      tabIndex={0}
                    />
                    <div
                      className="makeStyles-modalBody-160 makeStyles-paper-159 login--modal"
                      tabIndex="-1"
                    >
                      <WithStyles(ForwardRef(Typography))>
                        <ForwardRef(Typography)
                          classes={
                            Object {
                              "alignCenter": "MuiTypography-alignCenter",
                              "alignJustify": "MuiTypography-alignJustify",
                              "alignLeft": "MuiTypography-alignLeft",
                              "alignRight": "MuiTypography-alignRight",
                              "body1": "MuiTypography-body1",
                              "body2": "MuiTypography-body2",
                              "button": "MuiTypography-button",
                              "caption": "MuiTypography-caption",
                              "colorError": "MuiTypography-colorError",
                              "colorInherit": "MuiTypography-colorInherit",
                              "colorPrimary": "MuiTypography-colorPrimary",
                              "colorSecondary": "MuiTypography-colorSecondary",
                              "colorTextPrimary": "MuiTypography-colorTextPrimary",
                              "colorTextSecondary": "MuiTypography-colorTextSecondary",
                              "displayBlock": "MuiTypography-displayBlock",
                              "displayInline": "MuiTypography-displayInline",
                              "gutterBottom": "MuiTypography-gutterBottom",
                              "h1": "MuiTypography-h1",
                              "h2": "MuiTypography-h2",
                              "h3": "MuiTypography-h3",
                              "h4": "MuiTypography-h4",
                              "h5": "MuiTypography-h5",
                              "h6": "MuiTypography-h6",
                              "noWrap": "MuiTypography-noWrap",
                              "overline": "MuiTypography-overline",
                              "paragraph": "MuiTypography-paragraph",
                              "root": "MuiTypography-root",
                              "srOnly": "MuiTypography-srOnly",
                              "subtitle1": "MuiTypography-subtitle1",
                              "subtitle2": "MuiTypography-subtitle2",
                            }
                          }
                        >
                          <p
                            className="MuiTypography-root MuiTypography-body1"
                          >
                            LOGIN
                          </p>
                        </ForwardRef(Typography)>
                      </WithStyles(ForwardRef(Typography))>
                      <div
                        className="modal-text"
                      >
                        <WithStyles(ForwardRef(TextField))
                          autoFocus={true}
                          id="username-email--input"
                          label="Username or Email"
                          variant="outlined"
                        >
                          <ForwardRef(TextField)
                            autoFocus={true}
                            classes={
                              Object {
                                "root": "MuiTextField-root",
                              }
                            }
                            id="username-email--input"
                            label="Username or Email"
                            variant="outlined"
                          >
                            <WithStyles(ForwardRef(FormControl))
                              className="MuiTextField-root"
                              color="primary"
                              disabled={false}
                              error={false}
                              fullWidth={false}
                              required={false}
                              variant="outlined"
                            >
                              <ForwardRef(FormControl)
                                className="MuiTextField-root"
                                classes={
                                  Object {
                                    "fullWidth": "MuiFormControl-fullWidth",
                                    "marginDense": "MuiFormControl-marginDense",
                                    "marginNormal": "MuiFormControl-marginNormal",
                                    "root": "MuiFormControl-root",
                                  }
                                }
                                color="primary"
                                disabled={false}
                                error={false}
                                fullWidth={false}
                                required={false}
                                variant="outlined"
                              >
                                <div
                                  className="MuiFormControl-root MuiTextField-root"
                                >
                                  <WithStyles(ForwardRef(InputLabel))
                                    htmlFor="username-email--input"
                                    id="username-email--input-label"
                                  >
                                    <ForwardRef(InputLabel)
                                      classes={
                                        Object {
                                          "animated": "MuiInputLabel-animated",
                                          "asterisk": "MuiInputLabel-asterisk",
                                          "disabled": "Mui-disabled",
                                          "error": "Mui-error",
                                          "filled": "MuiInputLabel-filled",
                                          "focused": "Mui-focused",
                                          "formControl": "MuiInputLabel-formControl",
                                          "marginDense": "MuiInputLabel-marginDense",
                                          "outlined": "MuiInputLabel-outlined",
                                          "required": "Mui-required",
                                          "root": "MuiInputLabel-root",
                                          "shrink": "MuiInputLabel-shrink",
                                        }
                                      }
                                      htmlFor="username-email--input"
                                      id="username-email--input-label"
                                    >
                                      <WithStyles(ForwardRef(FormLabel))
                                        className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-shrink MuiInputLabel-outlined"
                                        classes={
                                          Object {
                                            "asterisk": "MuiInputLabel-asterisk",
                                            "disabled": "Mui-disabled",
                                            "error": "Mui-error",
                                            "focused": "Mui-focused",
                                            "required": "Mui-required",
                                          }
                                        }
                                        data-shrink={true}
                                        htmlFor="username-email--input"
                                        id="username-email--input-label"
                                      >
                                        <ForwardRef(FormLabel)
                                          className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-shrink MuiInputLabel-outlined"
                                          classes={
                                            Object {
                                              "asterisk": "MuiFormLabel-asterisk MuiInputLabel-asterisk",
                                              "colorSecondary": "MuiFormLabel-colorSecondary",
                                              "disabled": "Mui-disabled Mui-disabled",
                                              "error": "Mui-error Mui-error",
                                              "filled": "MuiFormLabel-filled",
                                              "focused": "Mui-focused Mui-focused",
                                              "required": "Mui-required Mui-required",
                                              "root": "MuiFormLabel-root",
                                            }
                                          }
                                          data-shrink={true}
                                          htmlFor="username-email--input"
                                          id="username-email--input-label"
                                        >
                                          <label
                                            className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-shrink MuiInputLabel-outlined Mui-focused Mui-focused"
                                            data-shrink={true}
                                            htmlFor="username-email--input"
                                            id="username-email--input-label"
                                          >
                                            Username or Email
                                          </label>
                                        </ForwardRef(FormLabel)>
                                      </WithStyles(ForwardRef(FormLabel))>
                                    </ForwardRef(InputLabel)>
                                  </WithStyles(ForwardRef(InputLabel))>
                                  <WithStyles(ForwardRef(OutlinedInput))
                                    autoFocus={true}
                                    fullWidth={false}
                                    id="username-email--input"
                                    label={
                                      <React.Fragment>
                                        Username or Email
                                      </React.Fragment>
                                    }
                                    multiline={false}
                                  >
                                    <ForwardRef(OutlinedInput)
                                      autoFocus={true}
                                      classes={
                                        Object {
                                          "adornedEnd": "MuiOutlinedInput-adornedEnd",
                                          "adornedStart": "MuiOutlinedInput-adornedStart",
                                          "colorSecondary": "MuiOutlinedInput-colorSecondary",
                                          "disabled": "Mui-disabled",
                                          "error": "Mui-error",
                                          "focused": "Mui-focused",
                                          "input": "MuiOutlinedInput-input",
                                          "inputAdornedEnd": "MuiOutlinedInput-inputAdornedEnd",
                                          "inputAdornedStart": "MuiOutlinedInput-inputAdornedStart",
                                          "inputMarginDense": "MuiOutlinedInput-inputMarginDense",
                                          "inputMultiline": "MuiOutlinedInput-inputMultiline",
                                          "marginDense": "MuiOutlinedInput-marginDense",
                                          "multiline": "MuiOutlinedInput-multiline",
                                          "notchedOutline": "MuiOutlinedInput-notchedOutline",
                                          "root": "MuiOutlinedInput-root",
                                        }
                                      }
                                      fullWidth={false}
                                      id="username-email--input"
                                      label={
                                        <React.Fragment>
                                          Username or Email
                                        </React.Fragment>
                                      }
                                      multiline={false}
                                    >
                                      <WithStyles(ForwardRef(InputBase))
                                        autoFocus={true}
                                        classes={
                                          Object {
                                            "adornedEnd": "MuiOutlinedInput-adornedEnd",
                                            "adornedStart": "MuiOutlinedInput-adornedStart",
                                            "colorSecondary": "MuiOutlinedInput-colorSecondary",
                                            "disabled": "Mui-disabled",
                                            "error": "Mui-error",
                                            "focused": "Mui-focused",
                                            "input": "MuiOutlinedInput-input",
                                            "inputAdornedEnd": "MuiOutlinedInput-inputAdornedEnd",
                                            "inputAdornedStart": "MuiOutlinedInput-inputAdornedStart",
                                            "inputMarginDense": "MuiOutlinedInput-inputMarginDense",
                                            "inputMultiline": "MuiOutlinedInput-inputMultiline",
                                            "marginDense": "MuiOutlinedInput-marginDense",
                                            "multiline": "MuiOutlinedInput-multiline",
                                            "notchedOutline": null,
                                            "root": "MuiOutlinedInput-root",
                                          }
                                        }
                                        fullWidth={false}
                                        id="username-email--input"
                                        inputComponent="input"
                                        multiline={false}
                                        renderSuffix={[Function]}
                                        type="text"
                                      >
                                        <ForwardRef(InputBase)
                                          autoFocus={true}
                                          classes={
                                            Object {
                                              "adornedEnd": "MuiInputBase-adornedEnd MuiOutlinedInput-adornedEnd",
                                              "adornedStart": "MuiInputBase-adornedStart MuiOutlinedInput-adornedStart",
                                              "colorSecondary": "MuiInputBase-colorSecondary MuiOutlinedInput-colorSecondary",
                                              "disabled": "Mui-disabled Mui-disabled",
                                              "error": "Mui-error Mui-error",
                                              "focused": "Mui-focused Mui-focused",
                                              "formControl": "MuiInputBase-formControl",
                                              "fullWidth": "MuiInputBase-fullWidth",
                                              "input": "MuiInputBase-input MuiOutlinedInput-input",
                                              "inputAdornedEnd": "MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd",
                                              "inputAdornedStart": "MuiInputBase-inputAdornedStart MuiOutlinedInput-inputAdornedStart",
                                              "inputHiddenLabel": "MuiInputBase-inputHiddenLabel",
                                              "inputMarginDense": "MuiInputBase-inputMarginDense MuiOutlinedInput-inputMarginDense",
                                              "inputMultiline": "MuiInputBase-inputMultiline MuiOutlinedInput-inputMultiline",
                                              "inputTypeSearch": "MuiInputBase-inputTypeSearch",
                                              "marginDense": "MuiInputBase-marginDense MuiOutlinedInput-marginDense",
                                              "multiline": "MuiInputBase-multiline MuiOutlinedInput-multiline",
                                              "root": "MuiInputBase-root MuiOutlinedInput-root",
                                            }
                                          }
                                          fullWidth={false}
                                          id="username-email--input"
                                          inputComponent="input"
                                          multiline={false}
                                          renderSuffix={[Function]}
                                          type="text"
                                        >
                                          <div
                                            className="MuiInputBase-root MuiOutlinedInput-root Mui-focused Mui-focused MuiInputBase-formControl"
                                            onClick={[Function]}
                                          >
                                            <input
                                              aria-invalid={false}
                                              autoFocus={true}
                                              className="MuiInputBase-input MuiOutlinedInput-input"
                                              disabled={false}
                                              id="username-email--input"
                                              onAnimationStart={[Function]}
                                              onBlur={[Function]}
                                              onChange={[Function]}
                                              onFocus={[Function]}
                                              required={false}
                                              type="text"
                                            />
                                            <WithStyles(ForwardRef(NotchedOutline))
                                              className="MuiOutlinedInput-notchedOutline"
                                              label={
                                                <React.Fragment>
                                                  Username or Email
                                                </React.Fragment>
                                              }
                                              labelWidth={0}
                                              notched={true}
                                            >
                                              <ForwardRef(NotchedOutline)
                                                className="MuiOutlinedInput-notchedOutline"
                                                classes={
                                                  Object {
                                                    "legend": "PrivateNotchedOutline-legend-350",
                                                    "legendLabelled": "PrivateNotchedOutline-legendLabelled-351",
                                                    "legendNotched": "PrivateNotchedOutline-legendNotched-352",
                                                    "root": "PrivateNotchedOutline-root-349",
                                                  }
                                                }
                                                label={
                                                  <React.Fragment>
                                                    Username or Email
                                                  </React.Fragment>
                                                }
                                                labelWidth={0}
                                                notched={true}
                                              >
                                                <fieldset
                                                  aria-hidden={true}
                                                  className="PrivateNotchedOutline-root-349 MuiOutlinedInput-notchedOutline"
                                                >
                                                  <legend
                                                    className="PrivateNotchedOutline-legendLabelled-351 PrivateNotchedOutline-legendNotched-352"
                                                  >
                                                    <span>
                                                      Username or Email
                                                    </span>
                                                  </legend>
                                                </fieldset>
                                              </ForwardRef(NotchedOutline)>
                                            </WithStyles(ForwardRef(NotchedOutline))>
                                          </div>
                                        </ForwardRef(InputBase)>
                                      </WithStyles(ForwardRef(InputBase))>
                                    </ForwardRef(OutlinedInput)>
                                  </WithStyles(ForwardRef(OutlinedInput))>
                                </div>
                              </ForwardRef(FormControl)>
                            </WithStyles(ForwardRef(FormControl))>
                          </ForwardRef(TextField)>
                        </WithStyles(ForwardRef(TextField))>
                      </div>
                      <div
                        className="modal-text"
                      >
                        <WithStyles(ForwardRef(TextField))
                          id="password--input"
                          label="Password"
                          type="password"
                          variant="outlined"
                        >
                          <ForwardRef(TextField)
                            classes={
                              Object {
                                "root": "MuiTextField-root",
                              }
                            }
                            id="password--input"
                            label="Password"
                            type="password"
                            variant="outlined"
                          >
                            <WithStyles(ForwardRef(FormControl))
                              className="MuiTextField-root"
                              color="primary"
                              disabled={false}
                              error={false}
                              fullWidth={false}
                              required={false}
                              variant="outlined"
                            >
                              <ForwardRef(FormControl)
                                className="MuiTextField-root"
                                classes={
                                  Object {
                                    "fullWidth": "MuiFormControl-fullWidth",
                                    "marginDense": "MuiFormControl-marginDense",
                                    "marginNormal": "MuiFormControl-marginNormal",
                                    "root": "MuiFormControl-root",
                                  }
                                }
                                color="primary"
                                disabled={false}
                                error={false}
                                fullWidth={false}
                                required={false}
                                variant="outlined"
                              >
                                <div
                                  className="MuiFormControl-root MuiTextField-root"
                                >
                                  <WithStyles(ForwardRef(InputLabel))
                                    htmlFor="password--input"
                                    id="password--input-label"
                                  >
                                    <ForwardRef(InputLabel)
                                      classes={
                                        Object {
                                          "animated": "MuiInputLabel-animated",
                                          "asterisk": "MuiInputLabel-asterisk",
                                          "disabled": "Mui-disabled",
                                          "error": "Mui-error",
                                          "filled": "MuiInputLabel-filled",
                                          "focused": "Mui-focused",
                                          "formControl": "MuiInputLabel-formControl",
                                          "marginDense": "MuiInputLabel-marginDense",
                                          "outlined": "MuiInputLabel-outlined",
                                          "required": "Mui-required",
                                          "root": "MuiInputLabel-root",
                                          "shrink": "MuiInputLabel-shrink",
                                        }
                                      }
                                      htmlFor="password--input"
                                      id="password--input-label"
                                    >
                                      <WithStyles(ForwardRef(FormLabel))
                                        className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-outlined"
                                        classes={
                                          Object {
                                            "asterisk": "MuiInputLabel-asterisk",
                                            "disabled": "Mui-disabled",
                                            "error": "Mui-error",
                                            "focused": "Mui-focused",
                                            "required": "Mui-required",
                                          }
                                        }
                                        data-shrink={false}
                                        htmlFor="password--input"
                                        id="password--input-label"
                                      >
                                        <ForwardRef(FormLabel)
                                          className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-outlined"
                                          classes={
                                            Object {
                                              "asterisk": "MuiFormLabel-asterisk MuiInputLabel-asterisk",
                                              "colorSecondary": "MuiFormLabel-colorSecondary",
                                              "disabled": "Mui-disabled Mui-disabled",
                                              "error": "Mui-error Mui-error",
                                              "filled": "MuiFormLabel-filled",
                                              "focused": "Mui-focused Mui-focused",
                                              "required": "Mui-required Mui-required",
                                              "root": "MuiFormLabel-root",
                                            }
                                          }
                                          data-shrink={false}
                                          htmlFor="password--input"
                                          id="password--input-label"
                                        >
                                          <label
                                            className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-outlined"
                                            data-shrink={false}
                                            htmlFor="password--input"
                                            id="password--input-label"
                                          >
                                            Password
                                          </label>
                                        </ForwardRef(FormLabel)>
                                      </WithStyles(ForwardRef(FormLabel))>
                                    </ForwardRef(InputLabel)>
                                  </WithStyles(ForwardRef(InputLabel))>
                                  <WithStyles(ForwardRef(OutlinedInput))
                                    autoFocus={false}
                                    fullWidth={false}
                                    id="password--input"
                                    label={
                                      <React.Fragment>
                                        Password
                                      </React.Fragment>
                                    }
                                    multiline={false}
                                    type="password"
                                  >
                                    <ForwardRef(OutlinedInput)
                                      autoFocus={false}
                                      classes={
                                        Object {
                                          "adornedEnd": "MuiOutlinedInput-adornedEnd",
                                          "adornedStart": "MuiOutlinedInput-adornedStart",
                                          "colorSecondary": "MuiOutlinedInput-colorSecondary",
                                          "disabled": "Mui-disabled",
                                          "error": "Mui-error",
                                          "focused": "Mui-focused",
                                          "input": "MuiOutlinedInput-input",
                                          "inputAdornedEnd": "MuiOutlinedInput-inputAdornedEnd",
                                          "inputAdornedStart": "MuiOutlinedInput-inputAdornedStart",
                                          "inputMarginDense": "MuiOutlinedInput-inputMarginDense",
                                          "inputMultiline": "MuiOutlinedInput-inputMultiline",
                                          "marginDense": "MuiOutlinedInput-marginDense",
                                          "multiline": "MuiOutlinedInput-multiline",
                                          "notchedOutline": "MuiOutlinedInput-notchedOutline",
                                          "root": "MuiOutlinedInput-root",
                                        }
                                      }
                                      fullWidth={false}
                                      id="password--input"
                                      label={
                                        <React.Fragment>
                                          Password
                                        </React.Fragment>
                                      }
                                      multiline={false}
                                      type="password"
                                    >
                                      <WithStyles(ForwardRef(InputBase))
                                        autoFocus={false}
                                        classes={
                                          Object {
                                            "adornedEnd": "MuiOutlinedInput-adornedEnd",
                                            "adornedStart": "MuiOutlinedInput-adornedStart",
                                            "colorSecondary": "MuiOutlinedInput-colorSecondary",
                                            "disabled": "Mui-disabled",
                                            "error": "Mui-error",
                                            "focused": "Mui-focused",
                                            "input": "MuiOutlinedInput-input",
                                            "inputAdornedEnd": "MuiOutlinedInput-inputAdornedEnd",
                                            "inputAdornedStart": "MuiOutlinedInput-inputAdornedStart",
                                            "inputMarginDense": "MuiOutlinedInput-inputMarginDense",
                                            "inputMultiline": "MuiOutlinedInput-inputMultiline",
                                            "marginDense": "MuiOutlinedInput-marginDense",
                                            "multiline": "MuiOutlinedInput-multiline",
                                            "notchedOutline": null,
                                            "root": "MuiOutlinedInput-root",
                                          }
                                        }
                                        fullWidth={false}
                                        id="password--input"
                                        inputComponent="input"
                                        multiline={false}
                                        renderSuffix={[Function]}
                                        type="password"
                                      >
                                        <ForwardRef(InputBase)
                                          autoFocus={false}
                                          classes={
                                            Object {
                                              "adornedEnd": "MuiInputBase-adornedEnd MuiOutlinedInput-adornedEnd",
                                              "adornedStart": "MuiInputBase-adornedStart MuiOutlinedInput-adornedStart",
                                              "colorSecondary": "MuiInputBase-colorSecondary MuiOutlinedInput-colorSecondary",
                                              "disabled": "Mui-disabled Mui-disabled",
                                              "error": "Mui-error Mui-error",
                                              "focused": "Mui-focused Mui-focused",
                                              "formControl": "MuiInputBase-formControl",
                                              "fullWidth": "MuiInputBase-fullWidth",
                                              "input": "MuiInputBase-input MuiOutlinedInput-input",
                                              "inputAdornedEnd": "MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd",
                                              "inputAdornedStart": "MuiInputBase-inputAdornedStart MuiOutlinedInput-inputAdornedStart",
                                              "inputHiddenLabel": "MuiInputBase-inputHiddenLabel",
                                              "inputMarginDense": "MuiInputBase-inputMarginDense MuiOutlinedInput-inputMarginDense",
                                              "inputMultiline": "MuiInputBase-inputMultiline MuiOutlinedInput-inputMultiline",
                                              "inputTypeSearch": "MuiInputBase-inputTypeSearch",
                                              "marginDense": "MuiInputBase-marginDense MuiOutlinedInput-marginDense",
                                              "multiline": "MuiInputBase-multiline MuiOutlinedInput-multiline",
                                              "root": "MuiInputBase-root MuiOutlinedInput-root",
                                            }
                                          }
                                          fullWidth={false}
                                          id="password--input"
                                          inputComponent="input"
                                          multiline={false}
                                          renderSuffix={[Function]}
                                          type="password"
                                        >
                                          <div
                                            className="MuiInputBase-root MuiOutlinedInput-root MuiInputBase-formControl"
                                            onClick={[Function]}
                                          >
                                            <input
                                              aria-invalid={false}
                                              autoFocus={false}
                                              className="MuiInputBase-input MuiOutlinedInput-input"
                                              disabled={false}
                                              id="password--input"
                                              onAnimationStart={[Function]}
                                              onBlur={[Function]}
                                              onChange={[Function]}
                                              onFocus={[Function]}
                                              required={false}
                                              type="password"
                                            />
                                            <WithStyles(ForwardRef(NotchedOutline))
                                              className="MuiOutlinedInput-notchedOutline"
                                              label={
                                                <React.Fragment>
                                                  Password
                                                </React.Fragment>
                                              }
                                              labelWidth={0}
                                              notched={false}
                                            >
                                              <ForwardRef(NotchedOutline)
                                                className="MuiOutlinedInput-notchedOutline"
                                                classes={
                                                  Object {
                                                    "legend": "PrivateNotchedOutline-legend-350",
                                                    "legendLabelled": "PrivateNotchedOutline-legendLabelled-351",
                                                    "legendNotched": "PrivateNotchedOutline-legendNotched-352",
                                                    "root": "PrivateNotchedOutline-root-349",
                                                  }
                                                }
                                                label={
                                                  <React.Fragment>
                                                    Password
                                                  </React.Fragment>
                                                }
                                                labelWidth={0}
                                                notched={false}
                                              >
                                                <fieldset
                                                  aria-hidden={true}
                                                  className="PrivateNotchedOutline-root-349 MuiOutlinedInput-notchedOutline"
                                                >
                                                  <legend
                                                    className="PrivateNotchedOutline-legendLabelled-351"
                                                  >
                                                    <span>
                                                      Password
                                                    </span>
                                                  </legend>
                                                </fieldset>
                                              </ForwardRef(NotchedOutline)>
                                            </WithStyles(ForwardRef(NotchedOutline))>
                                          </div>
                                        </ForwardRef(InputBase)>
                                      </WithStyles(ForwardRef(InputBase))>
                                    </ForwardRef(OutlinedInput)>
                                  </WithStyles(ForwardRef(OutlinedInput))>
                                </div>
                              </ForwardRef(FormControl)>
                            </WithStyles(ForwardRef(FormControl))>
                          </ForwardRef(TextField)>
                        </WithStyles(ForwardRef(TextField))>
                      </div>
                      <WithStyles(ForwardRef(Button))
                        color="primary"
                        onClick={[Function]}
                        variant="contained"
                      >
                        <ForwardRef(Button)
                          classes={
                            Object {
                              "colorInherit": "MuiButton-colorInherit",
                              "contained": "MuiButton-contained",
                              "containedPrimary": "MuiButton-containedPrimary",
                              "containedSecondary": "MuiButton-containedSecondary",
                              "containedSizeLarge": "MuiButton-containedSizeLarge",
                              "containedSizeSmall": "MuiButton-containedSizeSmall",
                              "disableElevation": "MuiButton-disableElevation",
                              "disabled": "Mui-disabled",
                              "endIcon": "MuiButton-endIcon",
                              "focusVisible": "Mui-focusVisible",
                              "fullWidth": "MuiButton-fullWidth",
                              "iconSizeLarge": "MuiButton-iconSizeLarge",
                              "iconSizeMedium": "MuiButton-iconSizeMedium",
                              "iconSizeSmall": "MuiButton-iconSizeSmall",
                              "label": "MuiButton-label",
                              "outlined": "MuiButton-outlined",
                              "outlinedPrimary": "MuiButton-outlinedPrimary",
                              "outlinedSecondary": "MuiButton-outlinedSecondary",
                              "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                              "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                              "root": "MuiButton-root",
                              "sizeLarge": "MuiButton-sizeLarge",
                              "sizeSmall": "MuiButton-sizeSmall",
                              "startIcon": "MuiButton-startIcon",
                              "text": "MuiButton-text",
                              "textPrimary": "MuiButton-textPrimary",
                              "textSecondary": "MuiButton-textSecondary",
                              "textSizeLarge": "MuiButton-textSizeLarge",
                              "textSizeSmall": "MuiButton-textSizeSmall",
                            }
                          }
                          color="primary"
                          onClick={[Function]}
                          variant="contained"
                        >
                          <WithStyles(ForwardRef(ButtonBase))
                            className="MuiButton-root MuiButton-contained MuiButton-containedPrimary"
                            component="button"
                            disabled={false}
                            focusRipple={true}
                            focusVisibleClassName="Mui-focusVisible"
                            onClick={[Function]}
                            type="button"
                          >
                            <ForwardRef(ButtonBase)
                              className="MuiButton-root MuiButton-contained MuiButton-containedPrimary"
                              classes={
                                Object {
                                  "disabled": "Mui-disabled",
                                  "focusVisible": "Mui-focusVisible",
                                  "root": "MuiButtonBase-root",
                                }
                              }
                              component="button"
                              disabled={false}
                              focusRipple={true}
                              focusVisibleClassName="Mui-focusVisible"
                              onClick={[Function]}
                              type="button"
                            >
                              <button
                                className="MuiButtonBase-root MuiButton-root MuiButton-contained MuiButton-containedPrimary"
                                disabled={false}
                                onBlur={[Function]}
                                onClick={[Function]}
                                onDragLeave={[Function]}
                                onFocus={[Function]}
                                onKeyDown={[Function]}
                                onKeyUp={[Function]}
                                onMouseDown={[Function]}
                                onMouseLeave={[Function]}
                                onMouseUp={[Function]}
                                onTouchEnd={[Function]}
                                onTouchMove={[Function]}
                                onTouchStart={[Function]}
                                tabIndex={0}
                                type="button"
                              >
                                <span
                                  className="MuiButton-label"
                                >
                                  SUBMIT
                                </span>
                                <NoSsr>
                                  <WithStyles(undefined)
                                    center={false}
                                  >
                                    <ForwardRef(TouchRipple)
                                      center={false}
                                      classes={
                                        Object {
                                          "child": "MuiTouchRipple-child",
                                          "childLeaving": "MuiTouchRipple-childLeaving",
                                          "childPulsate": "MuiTouchRipple-childPulsate",
                                          "ripple": "MuiTouchRipple-ripple",
                                          "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                          "rippleVisible": "MuiTouchRipple-rippleVisible",
                                          "root": "MuiTouchRipple-root",
                                        }
                                      }
                                    >
                                      <span
                                        className="MuiTouchRipple-root"
                                      >
                                        <TransitionGroup
                                          childFactory={[Function]}
                                          component={null}
                                          exit={true}
                                        />
                                      </span>
                                    </ForwardRef(TouchRipple)>
                                  </WithStyles(undefined)>
                                </NoSsr>
                              </button>
                            </ForwardRef(ButtonBase)>
                          </WithStyles(ForwardRef(ButtonBase))>
                        </ForwardRef(Button)>
                      </WithStyles(ForwardRef(Button))>
                    </div>
                    <div
                      data-test="sentinelEnd"
                      tabIndex={0}
                    />
                  </TrapFocus>
                </div>
              </Portal>
            </ForwardRef(Portal)>
          </ForwardRef(Modal)>
        </LoginModal>
      </div>
    </ThemeProvider>
  </App>
</Provider>
`;
